"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[1416],{3636:(e,n,r)=>{r.d(n,{Iu:()=>m,yg:()=>u});var a=r(5668);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=a.createContext({}),c=function(e){var n=a.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},m=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=t,u=p["".concat(i,".").concat(d)]||p[d]||f[d]||o;return r?a.createElement(u,s(s({ref:n},m),{},{components:r})):a.createElement(u,s({ref:n},m))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:t,s[1]=l;for(var c=2;c<o;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9208:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(5307),t=(r(5668),r(3636));const o={},s="oneOf, anyOf, and allOf",l={unversionedId:"json-schema/oneof",id:"version-5.24.10/json-schema/oneof",title:"oneOf, anyOf, and allOf",description:"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf.",source:"@site/versioned_docs/version-5.24.10/json-schema/oneof.md",sourceDirName:"json-schema",slug:"/json-schema/oneof",permalink:"/react-jsonschema-form/docs/version-5.24.10/json-schema/oneof",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-5.24.10/json-schema/oneof.md",tags:[],version:"5.24.10",frontMatter:{},sidebar:"docs",previous:{title:"Objects",permalink:"/react-jsonschema-form/docs/version-5.24.10/json-schema/objects"},next:{title:"Single fields",permalink:"/react-jsonschema-form/docs/version-5.24.10/json-schema/single"}},i={},c=[{value:"oneOf",id:"oneof",level:2},{value:"anyOf",id:"anyof",level:2},{value:"allOf",id:"allof",level:2}],m={toc:c},p="wrapper";function f(e){let{components:n,...r}=e;return(0,t.yg)(p,(0,a.c)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"oneof-anyof-and-allof"},"oneOf, anyOf, and allOf"),(0,t.yg)("p",null,"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A schema with ",(0,t.yg)("inlineCode",{parentName:"li"},"oneOf")," is valid if ",(0,t.yg)("em",{parentName:"li"},"exactly one")," of the subschemas is valid."),(0,t.yg)("li",{parentName:"ul"},"A schema with ",(0,t.yg)("inlineCode",{parentName:"li"},"anyOf")," is valid if ",(0,t.yg)("em",{parentName:"li"},"at least one")," of the subschemas is valid."),(0,t.yg)("li",{parentName:"ul"},"A schema with ",(0,t.yg)("inlineCode",{parentName:"li"},"allOf")," is valid if ",(0,t.yg)("em",{parentName:"li"},"all")," of the subschemas are valid.")),(0,t.yg)("h2",{id:"oneof"},"oneOf"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  oneOf: [\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n      },\n      required: ['lorem'],\n    },\n    {\n      properties: {\n        ipsum: {\n          type: 'string',\n        },\n      },\n      required: ['ipsum'],\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n")),(0,t.yg)("h2",{id:"anyof"},"anyOf"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  anyOf: [\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n      },\n      required: ['lorem'],\n    },\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n        ipsum: {\n          type: 'string',\n        },\n      },\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n")),(0,t.yg)("h2",{id:"allof"},"allOf"),(0,t.yg)("p",null,"When ",(0,t.yg)("inlineCode",{parentName:"p"},"allOf")," is specified in a schema, react-jsonschema-form uses the ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/mokkabonna/json-schema-merge-allof"},"json-schema-merge-allof")," library to merge the specified subschemas to create a combined subschema that is valid. For example, the below schema evaluates to a combined subschema of ",(0,t.yg)("inlineCode",{parentName:"p"},'{type: "boolean"}'),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Field',\n  allOf: [\n    {\n      type: ['string', 'boolean'],\n    },\n    {\n      type: 'boolean',\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n")))}f.isMDXComponent=!0}}]);